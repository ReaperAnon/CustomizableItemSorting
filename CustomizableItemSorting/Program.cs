using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Noggog;

namespace CustomizableItemSorting
{
    public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "CustomItemSorting.esp")
                .Run(args);
        }

        public static string ReplaceName(string itemName, string format, string category, List<string> stringsToRemove)
        {
            foreach (string key in stringsToRemove) if(key.Length > 0)
                itemName = itemName.Replace(key, "", StringComparison.OrdinalIgnoreCase);

            return format.Replace("$type", category).Replace("$name", itemName);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Weapons
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Weapons.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Weapons.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Weapons.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Weapons.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Weapons.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IAmmunitionGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Weapons.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Weapons.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Ammunitions.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Ammunitions.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Ammunitions.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Weapons.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Magic
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<ISpellGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Magic.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Magic.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Spells.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Magic.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Spells.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Magic.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Spells.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Magic.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Consumables
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IIngestibleGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Consumables.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Consumables.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Ingestibles.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Consumables.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Ingestibles.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Consumables.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Ingestibles.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Consumables.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Scrolls
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IScrollGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Scrolls.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Scrolls.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Scrolls.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Scrolls.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Scrolls.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Scrolls.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Scrolls.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Scrolls.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Ingredients
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IIngredientGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Ingredients.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Ingredients.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Ingredients.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Ingredients.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Ingredients.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Ingredients.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Ingredients.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Ingredients.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Books
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IBookGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Books.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Books.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.Books.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Books.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.Books.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Books.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.Books.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Books.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }

            // Misc
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IMiscItemGetter>())
            {
                if (itemGetter.Name is null || itemGetter.Name.String is null || itemGetter.EditorID is null) continue;

                var sortKeys = Settings.Misc.SortingEntries.Keys.ToList();
                for (int i = sortKeys.Count - 1; i >= 0; --i)
                {
                    bool wasSorted = false;
                    var currentEntry = Settings.Misc.SortingEntries[sortKeys[i]];

                    // By EDID.
                    foreach (var edid in currentEntry.EDIDS)
                    {
                        if (!itemGetter.AsLink().Equals(edid)) continue;
                        var item = state.PatchMod.MiscItems.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Misc.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;

                    }

                    if (wasSorted)
                        break;

                    // By name.
                    foreach (var stringEntry in currentEntry.StringKeys)
                    {
                        if (!itemGetter.Name.String.Contains(stringEntry, StringComparison.OrdinalIgnoreCase)) continue;
                        var item = state.PatchMod.MiscItems.GetOrAddAsOverride(itemGetter);
                        item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Misc.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                        wasSorted = true;
                        break;
                    }

                    if (wasSorted)
                        break;

                    // By keyword.
                    foreach (var keyword in itemGetter.Keywords.EmptyIfNull())
                    {
                        foreach (var keyMatch in currentEntry.Keywords)
                        {
                            if (!keyword.Equals(keyMatch)) continue;
                            var item = state.PatchMod.MiscItems.GetOrAddAsOverride(itemGetter);
                            item.Name!.String = ReplaceName(itemGetter.Name.String, Settings.Misc.Formatting, sortKeys[i], currentEntry.StringsToRemove);
                            wasSorted = true;
                            break;
                        }

                        if (wasSorted)
                            break;
                    }
                }
            }
        }
    }
}
